generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  username    String
  email       String        @unique
  password    String
  referral    String        @unique
  phone       String?
  image       String?
  role        String        @default("user")
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  point       Point[]
  event       Event[]
  tickets     Ticket[]
  voucher     Voucher[]
  transaction Transaction[]
  EventReview EventReview[]
}

model Point {
  id         Int      @id @default(autoincrement())
  expireDate DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}

model Event {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  category       String
  location       String
  image          String
  price          Float
  seats          Int
  startdate      DateTime
  endDate        DateTime
  duration       String
  created_at     DateTime        @default(now())
  updatet_at     DateTime        @updatedAt
  EventReview    EventReview[]
  transaction    Transaction[]
  eventPromotion EventPromotion?
  User           User?           @relation(fields: [userId], references: [id])
  userId         Int
  Ticket         Ticket[]
  TicketTier     TicketTier[]
}

model Ticket {
  id        Int      @id @default(autoincrement())
  eventDate DateTime
  event     Event?   @relation(fields: [eventId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  eventId   Int?
}

model EventPromotion {
  id        Int     @id @default(autoincrement())
  count     Int
  code      String  @unique
  discount  Float
  isPrecent Boolean
  event     Event?  @relation(fields: [eventId], references: [id])
  eventId   Int     @unique
}

model TicketTier {
  id       Int    @id @default(autoincrement())
  nameTier String
  price    Float
  Event    Event? @relation(fields: [eventId], references: [id])
  eventId  Int?
}

model EventReview {
  id      Int    @id @default(autoincrement())
  rating  Int
  reveiw  String
  user    User?  @relation(fields: [userId], references: [id])
  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int
  userId  Int
}

model Voucher {
  id         Int      @id @default(autoincrement())
  expireDate DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int
}

model Transaction {
  id              Int      @id @default(autoincrement())
  transactionDate DateTime @default(now())
  totalAmount     Float
  user            User?    @relation(fields: [userId], references: [id])
  userId          Int
  event           Event?   @relation(fields: [eventId], references: [id])
  eventId         Int
}
